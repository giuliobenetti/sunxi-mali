From 62f9a33587f9a7445857528084cca820fecba002 Mon Sep 17 00:00:00 2001
From: Giulio Benetti <giulio.benetti@benettiengineering.com>
Date: Thu, 13 Jul 2023 12:01:27 +0200
Subject: [PATCH] Fix build with Linux 6.3

Linux with commit:
https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=bc292ab00f6c7a661a8a605c714e8a148f629ef6
introduced protection to vm_flags and now wrapper functions are needed to
write to it. So let's use vm_flags_set/clear() wrappers instead of directly
writing to const vm_flags variable.

Signed-off-by: Giulio Benetti <giulio.benetti@benettiengineering.com>
---
 src/devicedrv/mali/linux/mali_memory.c     | 8 ++++++++
 src/devicedrv/mali/linux/mali_memory_cow.c | 8 ++++++++
 2 files changed, 16 insertions(+)

diff --git a/src/devicedrv/mali/linux/mali_memory.c b/src/devicedrv/mali/linux/mali_memory.c
index 3300885..e192fbe 100755
--- a/src/devicedrv/mali/linux/mali_memory.c
+++ b/src/devicedrv/mali/linux/mali_memory.c
@@ -209,6 +209,9 @@ int mali_mmap(struct file *filp, struct vm_area_struct *vma)
 		 * that it's present and can never be paged out (see also previous
 		 * entry)
 		 */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 3, 0)
+		vm_flags_set(vma, VM_IO | VM_DONTCOPY | VM_PFNMAP | VM_DONTDUMP | VM_DONTEXPAND);
+#else
 		vma->vm_flags |= VM_IO;
 		vma->vm_flags |= VM_DONTCOPY;
 		vma->vm_flags |= VM_PFNMAP;
@@ -217,6 +220,7 @@ int mali_mmap(struct file *filp, struct vm_area_struct *vma)
 #else
 		vma->vm_flags |= VM_DONTDUMP;
 		vma->vm_flags |= VM_DONTEXPAND;
+#endif
 #endif
 	} else if (MALI_MEM_SWAP == mali_alloc->type) {
 		vma->vm_pgoff = mem_bkend->start_idx;
@@ -231,7 +235,11 @@ int mali_mmap(struct file *filp, struct vm_area_struct *vma)
 	if (!(vma->vm_flags & VM_WRITE)) {
 		MALI_DEBUG_PRINT(4, ("mmap allocation with read only !\n"));
 		/* add VM_WRITE for do_page_fault will check this when a write fault */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 3, 0)
+		vm_flags_set(vma, VM_WRITE | VM_READ);
+#else
 		vma->vm_flags |= VM_WRITE | VM_READ;
+#endif
 		vma->vm_page_prot = PAGE_READONLY;
 		vma->vm_page_prot = pgprot_writecombine(vma->vm_page_prot);
 		mem_bkend->flags |= MALI_MEM_BACKEND_FLAG_COW_CPU_NO_WRITE;
diff --git a/src/devicedrv/mali/linux/mali_memory_cow.c b/src/devicedrv/mali/linux/mali_memory_cow.c
index 54c66b8..6f12b54 100755
--- a/src/devicedrv/mali/linux/mali_memory_cow.c
+++ b/src/devicedrv/mali/linux/mali_memory_cow.c
@@ -391,13 +391,21 @@ _mali_osk_errcode_t mali_memory_cow_modify_range(mali_mem_backend *backend,
 			}
 		} else {
 			/* used to trigger page fault for swappable cowed memory. */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 3, 0)
+			vm_flags_set(alloc->cpu_mapping.vma, VM_PFNMAP | VM_MIXEDMAP);
+#else
 			alloc->cpu_mapping.vma->vm_flags |= VM_PFNMAP;
 			alloc->cpu_mapping.vma->vm_flags |= VM_MIXEDMAP;
+#endif
 
 			zap_vma_ptes(alloc->cpu_mapping.vma, alloc->cpu_mapping.vma->vm_start + range_start, range_size);
 			/* delete this flag to let swappble is ummapped regard to stauct page not page frame. */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(6, 3, 0)
+			vm_flags_clear(alloc->cpu_mapping.vma, VM_PFNMAP | VM_MIXEDMAP);
+#else
 			alloc->cpu_mapping.vma->vm_flags &= ~VM_PFNMAP;
 			alloc->cpu_mapping.vma->vm_flags &= ~VM_MIXEDMAP;
+#endif
 		}
 	}
 
-- 
2.34.1

