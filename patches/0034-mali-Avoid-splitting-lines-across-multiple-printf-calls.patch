From 8d1fa317a8586dbe929ec9769540445eba2a6169 Mon Sep 17 00:00:00 2001
From: Jonathan Liu <net147@gmail.com>
Date: Mon, 21 Jul 2025 10:43:39 +1000
Subject: [PATCH] mali: Avoid splitting lines across multiple printf calls

Since Linux 4.9, KERN_CONT is mandatory for continued lines. See
4bcc595ccd80 ("printk: reinstate KERN_CONT for printing continuation lines").
In the absence of KERN_CONT, a newline may be implicitly inserted by the
core printk code. However, KERN_CONT should only be used by core/arch
code during early bootup as a continued line is not SMP-safe.

Avoid all these issues altogether by not splitting lines across multiple
calls.

Signed-off-by: Jonathan Liu <net147@gmail.com>
---
 src/devicedrv/mali/common/mali_kernel_common.h | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/src/devicedrv/mali/common/mali_kernel_common.h b/src/devicedrv/mali/common/mali_kernel_common.h
index 990cf3a..fa24d96 100755
--- a/src/devicedrv/mali/common/mali_kernel_common.h
+++ b/src/devicedrv/mali/common/mali_kernel_common.h
@@ -127,6 +127,9 @@ static inline int del_timer_sync(struct
 #define MALI_PRINTF(args) _mali_osk_dbgmsg args;
 #endif
 
+#define MALI_UNPAREN(...) __VA_ARGS__
+#define MALI_PREFIX_PRINTF(prefix, args) MALI_PRINTF((prefix MALI_UNPAREN args))
+
 #define MALI_PRINT_ERROR(args) do{ \
 		MALI_PRINTF(("Mali: ERR: %s\n" ,__FILE__)); \
 		MALI_PRINTF(("           %s()%4d\n           ", __FUNCTION__, __LINE__)) ; \
@@ -134,10 +137,7 @@ static inline int del_timer_sync(struct
 		MALI_PRINTF(("\n")); \
 	} while(0)
 
-#define MALI_PRINT(args) do{ \
-		MALI_PRINTF(("Mali: ")); \
-		MALI_PRINTF(args); \
-	} while (0)
+#define MALI_PRINT(args) MALI_PREFIX_PRINTF("Mali: ", args)
 
 #ifdef DEBUG
 #ifndef mali_debug_level
@@ -147,18 +147,18 @@ extern int mali_debug_level;
 #define MALI_DEBUG_CODE(code) code
 #define MALI_DEBUG_PRINT(level, args)  do { \
 		if((level) <=  mali_debug_level)\
-		{MALI_PRINTF(("Mali<" #level ">: ")); MALI_PRINTF(args); } \
+		{MALI_PREFIX_PRINTF("Mali<" #level ">: ", args); } \
 	} while (0)
 
 #define MALI_DEBUG_PRINT_ERROR(args) MALI_PRINT_ERROR(args)
 
 #define MALI_DEBUG_PRINT_IF(level,condition,args)  \
 	if((condition)&&((level) <=  mali_debug_level))\
-	{MALI_PRINTF(("Mali<" #level ">: ")); MALI_PRINTF(args); }
+	{MALI_PREFIX_PRINTF("Mali<" #level ">: ", args); }
 
 #define MALI_DEBUG_PRINT_ELSE(level, args)\
 	else if((level) <=  mali_debug_level)\
-	{ MALI_PRINTF(("Mali<" #level ">: ")); MALI_PRINTF(args); }
+	{ MALI_PREFIX_PRINTF("Mali<" #level ">: ", args); }
 
 /**
  * @note these variants of DEBUG ASSERTS will cause a debugger breakpoint
-- 
2.50.1

